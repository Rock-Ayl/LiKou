package easy39;

/**
 * @Author ayl
 * @Date 2025-01-01
 * 3396. 使数组元素互不相同所需的最少操作次数
 * 简单
 * 相关企业
 * 提示
 * 给你一个整数数组 nums，你需要确保数组中的元素 互不相同 。为此，你可以执行以下操作任意次：
 * <p>
 * 从数组的开头移除 3 个元素。如果数组中元素少于 3 个，则移除所有剩余元素。
 * 注意：空数组也视作为数组元素互不相同。返回使数组元素互不相同所需的 最少操作次数 。
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入： nums = [1,2,3,4,2,3,3,5,7]
 * <p>
 * 输出： 2
 * <p>
 * 解释：
 * <p>
 * 第一次操作：移除前 3 个元素，数组变为 [4, 2, 3, 3, 5, 7]。
 * 第二次操作：再次移除前 3 个元素，数组变为 [3, 5, 7]，此时数组中的元素互不相同。
 * 因此，答案是 2。
 * <p>
 * 示例 2：
 * <p>
 * 输入： nums = [4,5,6,4,4]
 * <p>
 * 输出： 2
 * <p>
 * 解释：
 * <p>
 * 第一次操作：移除前 3 个元素，数组变为 [4, 4]。
 * 第二次操作：移除所有剩余元素，数组变为空。
 * 因此，答案是 2。
 * <p>
 * 示例 3：
 * <p>
 * 输入： nums = [6,7,8,9]
 * <p>
 * 输出： 0
 * <p>
 * 解释：
 * <p>
 * 数组中的元素已经互不相同，因此不需要进行任何操作，答案是 0。
 * <p>
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= nums.length <= 100
 * 1 <= nums[i] <= 100
 */
public class Code11 {

    public int minimumOperations(int[] nums) {
        //缓存
        int[] arr = new int[101];
        //循环
        for (int i = nums.length - 1; i >= 0; i--) {
            //记录数字出现次数,如果重复了
            if (++arr[nums[i]] > 1) {
                //需要删除的数量
                int count = i + 1;
                //计算并返回结果
                return count / 3 + (count % 3 != 0 ? 1 : 0);
            }
        }
        //默认
        return 0;
    }

    public static void main(String[] args) {
        System.out.println(new Code11().minimumOperations(new int[]{1, 2, 3, 4, 2, 3, 3, 5, 7}));
    }

}
