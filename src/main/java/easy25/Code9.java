package easy25;

/**
 * @Author ayl
 * @Date 2022-11-29
 * 661. 图片平滑器
 * 图像平滑器 是大小为 3 x 3 的过滤器，用于对图像的每个单元格平滑处理，平滑处理后单元格的值为该单元格的平均灰度。
 * <p>
 * 每个单元格的  平均灰度 定义为：该单元格自身及其周围的 8 个单元格的平均值，结果需向下取整。（即，需要计算蓝色平滑器中 9 个单元格的平均值）。
 * <p>
 * 如果一个单元格周围存在单元格缺失的情况，则计算平均灰度时不考虑缺失的单元格（即，需要计算红色平滑器中 4 个单元格的平均值）。
 * <p>
 * <p>
 * <p>
 * 给你一个表示图像灰度的 m x n 整数矩阵 img ，返回对图像的每个单元格平滑处理后的图像 。
 * <p>
 * <p>
 * <p>
 * 示例 1:
 * <p>
 * <p>
 * <p>
 * 输入:img = [[1,1,1],[1,0,1],[1,1,1]]
 * 输出:[[0, 0, 0],[0, 0, 0], [0, 0, 0]]
 * 解释:
 * 对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0
 * 对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0
 * 对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0
 * 示例 2:
 * <p>
 * <p>
 * 输入: img = [[100,200,100],[200,50,200],[100,200,100]]
 * 输出: [[137,141,137],[141,138,141],[137,141,137]]
 * 解释:
 * 对于点 (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137
 * 对于点 (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141
 * 对于点 (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138
 * <p>
 * <p>
 * 提示:
 * <p>
 * m == img.length
 * n == img[i].length
 * 1 <= m, n <= 200
 * 0 <= img[i][j] <= 255
 */
public class Code9 {

    //计算平局值
    private int count(int[][] img, int x, int y) {

        /**
         * 初始化本身
         */

        //和,默认其本身
        int sum = img[x][y];
        //次数,默认1
        int size = 1;

        /**
         * 上下左右
         */

        //判断越界
        if (x > 0) {
            //叠加
            sum += img[x - 1][y];
            size++;
        }
        //判断越界
        if (x < img.length - 1) {
            //叠加
            sum += img[x + 1][y];
            size++;
        }
        //判断越界
        if (y > 0) {
            //叠加
            sum += img[x][y - 1];
            size++;
        }
        //判断越界
        if (y < img[0].length - 1) {
            //叠加
            sum += img[x][y + 1];
            size++;
        }

        /**
         * 四角
         */

        //判断越界
        if (x > 0 && y > 0) {
            //叠加
            sum += img[x - 1][y - 1];
            size++;
        }
        //判断越界
        if (x > 0 && y < img[0].length - 1) {
            //叠加
            sum += img[x - 1][y + 1];
            size++;
        }
        //判断越界
        if (x < img.length - 1 && y > 0) {
            //叠加
            sum += img[x + 1][y - 1];
            size++;
        }
        //判断越界
        if (x < img.length - 1 && y < img[0].length - 1) {
            //叠加
            sum += img[x + 1][y + 1];
            size++;
        }

        //计算并返回结果
        return sum / size;
    }

    public int[][] imageSmoother(int[][] img) {
        //结果
        int[][] result = new int[img.length][img[0].length];
        //循环1
        for (int i = 0; i < img.length; i++) {
            //循环2
            for (int j = 0; j < img[0].length; j++) {
                //计算平均并记录
                result[i][j] = count(img, i, j);
            }
        }
        //返回
        return result;
    }

    public static void main(String[] args) {
        new Code9().imageSmoother(new int[][]{
                new int[]{100, 200, 100},
                new int[]{200, 50, 200},
                new int[]{100, 200, 100},
        });
    }

}
