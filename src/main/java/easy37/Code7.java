package easy37;

/**
 * @Author ayl
 * @Date 2024-06-16
 * <p>
 * 代码
 * 测试用例
 * 测试结果
 * 测试结果
 * 3178. 找出 K 秒后拿着球的孩子
 * 简单
 * 相关标签
 * 相关企业
 * 提示
 * 给你两个 正整数 n 和 k。有 n 个编号从 0 到 n - 1 的孩子按顺序从左到右站成一队。
 * <p>
 * 最初，编号为 0 的孩子拿着一个球，并且向右传球。每过一秒，拿着球的孩子就会将球传给他旁边的孩子。一旦球到达队列的 任一端 ，即编号为 0 的孩子或编号为 n - 1 的孩子处，传球方向就会 反转 。
 * <p>
 * 返回 k 秒后接到球的孩子的编号。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：n = 3, k = 5
 * <p>
 * 输出：1
 * <p>
 * 解释：
 * <p>
 * 经过的时间	孩子队列
 * 0	[0, 1, 2]
 * 1	[0, 1, 2]
 * 2	[0, 1, 2]
 * 3	[0, 1, 2]
 * 4	[0, 1, 2]
 * 5	[0, 1, 2]
 * 示例 2：
 * <p>
 * 输入：n = 5, k = 6
 * <p>
 * 输出：2
 * <p>
 * 解释：
 * <p>
 * 经过的时间	孩子队列
 * 0	[0, 1, 2, 3, 4]
 * 1	[0, 1, 2, 3, 4]
 * 2	[0, 1, 2, 3, 4]
 * 3	[0, 1, 2, 3, 4]
 * 4	[0, 1, 2, 3, 4]
 * 5	[0, 1, 2, 3, 4]
 * 6	[0, 1, 2, 3, 4]
 * 示例 3：
 * <p>
 * 输入：n = 4, k = 2
 * <p>
 * 输出：2
 * <p>
 * 解释：
 * <p>
 * 经过的时间	孩子队列
 * 0	[0, 1, 2, 3]
 * 1	[0, 1, 2, 3]
 * 2	[0, 1, 2, 3]
 * <p>
 * <p>
 * 提示：
 * <p>
 * 2 <= n <= 50
 * 1 <= k <= 50
 */
public class Code7 {

    public int numberOfChild(int n, int k) {
        //删除整轮
        k = k % ((n - 1) * 2);
        //如果是左边
        if (k < n) {
            //直接返回
            return k;
        } else {
            //计算
            return 2 * n - 2 - k;
        }
    }

    public static void main(String[] args) {
        System.out.println(new Code7().numberOfChild(5, 6));
    }

}
