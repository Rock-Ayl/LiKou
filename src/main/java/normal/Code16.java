package normal;

import java.util.HashSet;
import java.util.Set;

/**
 * Created By Rock-Ayl on 2021-03-21
 * 200. 岛屿数量
 * 给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
 * <p>
 * 岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
 * <p>
 * 此外，你可以假设该网格的四条边均被水包围。
 * <p>
 * 示例 1：
 * <p>
 * 输入：grid = [
 * ['1','1','1','1','0'],
 * ['1','1','0','1','0'],
 * ['1','1','0','0','0'],
 * ['0','0','0','0','0']
 * ]
 * 输出：1
 * 示例 2：
 * <p>
 * 输入：grid = [
 * ['1','1','0','0','0'],
 * ['1','1','0','0','0'],
 * ['0','0','1','0','0'],
 * ['0','0','0','1','1']
 * ]
 * 输出：3
 * <p>
 * <p>
 * 提示：
 * <p>
 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 300
 * grid[i][j] 的值为 '0' 或 '1'
 */
public class Code16 {

    /**
     * 将该岛屿的一部分标记
     *
     * @param x
     * @param y
     * @return
     */
    private static char[][] removeIsland(char[][] grid, int x, int y) {
        //如果未越界
        if (x >= 0 && y >= 0 && x < grid.length && y < grid[0].length) {
            //当前块
            char space = grid[x][y];
            //如果是岛屿
            if (space == '1') {
                //标记为水
                grid[x][y] = '0';
                //延伸
                grid = removeIsland(grid, x + 1, y);
                //延伸
                grid = removeIsland(grid, x, y + 1);
                //延伸
                grid = removeIsland(grid, x - 1, y);
                //延伸
                grid = removeIsland(grid, x, y - 1);
            }
        }
        //返回
        return grid;
    }

    public static int numIslands(char[][] grid) {
        //岛屿数量
        int size = 0;
        //当前岛屿初始坐标位置
        int x = 0, y = 0;
        //循环
        while (x < grid.length && y < grid[0].length) {
            //当前网格
            char space = grid[x][y];
            //如果当前网格是岛屿了
            if (space == '1') {
                //首先记录岛屿+1
                size++;
                //标记岛屿
                grid = removeIsland(grid, x, y);
            }
            //如果x未越界
            if (y < grid[0].length - 1) {
                //递增
                y++;
            } else {
                //下一行
                y = 0;
                //递增
                x++;
            }
        }
        //返回
        return size;
    }


    public static void main(String[] args) {
        System.out.println(numIslands(new char[][]{
                new char[]{'1', '0', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'}, new char[]{'1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '1', '0'}, new char[]{'0', '0', '0', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0', '0', '1', '0', '1', '0'}, new char[]{'0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '1'}, new char[]{'0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'}, new char[]{'1', '0', '0', '0', '0', '1', '0', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1'}, new char[]{'0', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1'}, new char[]{'0', '0', '0', '1', '0', '1', '0', '0', '1', '1', '0', '1', '0', '1', '1', '0', '1', '1', '1', '0'}, new char[]{'0', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '1'}, new char[]{'0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0'}, new char[]{'1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '1', '0', '1', '0'}, new char[]{'0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '1', '0', '1', '1', '1', '0', '1', '1', '0', '0'}, new char[]{'1', '1', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1'}, new char[]{'0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0'}, new char[]{'0', '0', '1', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0'}, new char[]{'1', '0', '0', '1', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '1'}, new char[]{'1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0'}, new char[]{'0', '1', '1', '0', '0', '0', '1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '1', '0', '0'}, new char[]{'0', '1', '0', '0', '0', '0', '1', '1', '0', '0', '1', '0', '1', '0', '0', '1', '0', '0', '1', '1'}, new char[]{'0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', '0'}
        }));
    }

}
