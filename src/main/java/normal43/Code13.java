package normal43;

/**
 * @Author ayl
 * @Date 2025-05-30
 * 91. 解码方法
 * 尝试过
 * 中等
 * 相关标签
 * premium lock icon
 * 相关企业
 * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 * <p>
 * "1" -> 'A'
 * <p>
 * "2" -> 'B'
 * <p>
 * ...
 * <p>
 * "25" -> 'Y'
 * <p>
 * "26" -> 'Z'
 * <p>
 * 然而，在 解码 已编码的消息时，你意识到有许多不同的方式来解码，因为有些编码被包含在其它编码当中（"2" 和 "5" 与 "25"）。
 * <p>
 * 例如，"11106" 可以映射为：
 * <p>
 * "AAJF" ，将消息分组为 (1, 1, 10, 6)
 * "KJF" ，将消息分组为 (11, 10, 6)
 * 消息不能分组为  (1, 11, 06) ，因为 "06" 不是一个合法编码（只有 "6" 是合法的）。
 * 注意，可能存在无法解码的字符串。
 * <p>
 * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。如果没有合法的方式解码整个字符串，返回 0。
 * <p>
 * 题目数据保证答案肯定是一个 32 位 的整数。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：s = "12"
 * 输出：2
 * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
 * 示例 2：
 * <p>
 * 输入：s = "226"
 * 输出：3
 * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 * 示例 3：
 * <p>
 * 输入：s = "06"
 * 输出：0
 * 解释："06" 无法映射到 "F" ，因为存在前导零（"6" 和 "06" 并不等价）。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= s.length <= 100
 * s 只包含数字，并且可能包含前导零。
 */
public class Code13 {

    public int numDecodings(String s) {
        //如果有前导0
        if (s.charAt(0) == '0') {
            //过
            return 0;
        }
        //动态规划
        int[] arr = new int[s.length() + 1];
        //初始化
        arr[0] = 1;
        arr[1] = 1;
        //循环
        for (int i = 2; i < arr.length; i++) {
            //默认至少有前置的数量
            arr[i] = (s.charAt(i - 1) != '0') ? arr[i - 1] : 0;
            //计算当前位置组成的十位数
            int two = (s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0');
            //如果满足
            if (two >= 10 && two <= 26) {
                //额外的数量
                arr[i] += arr[i - 2];
            }
        }
        //返回最终结果
        return arr[arr.length - 1];
    }

    public static void main(String[] args) {
        System.out.println(new Code13().numDecodings("226"));
    }

}
