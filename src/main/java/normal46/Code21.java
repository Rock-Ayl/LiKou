package normal46;

import java.util.List;

/**
 * @Author ayl
 * @Date 2025-10-11
 * 2811. 判断是否能拆分数组
 * 算术评级: 5
 * 第 357 场周赛
 * Q2
 * 同步题目状态
 * <p>
 * 1543
 * 相关标签
 * premium lock icon
 * 相关企业
 * 提示
 * 给你一个长度为 n 的数组 nums 和一个整数 m 。请你判断能否执行一系列操作，将数组拆分成 n 个 非空 数组。
 * <p>
 * 一个数组被称为 好 的，如果：
 * <p>
 * 子数组的长度为 1 ，或者
 * 子数组元素之和 大于或等于  m 。
 * 在每一步操作中，你可以选择一个 长度至少为 2 的现有数组（之前步骤的结果） 并将其拆分成 2 个子数组，而得到的 每个 子数组都需要是好的。
 * <p>
 * 如果你可以将给定数组拆分成 n 个满足要求的数组，返回 true ；否则，返回 false 。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：nums = [2, 2, 1], m = 4
 * <p>
 * 输出：true
 * <p>
 * 解释：
 * <p>
 * 将 [2, 2, 1] 切分为 [2, 2] 和 [1]。数组 [1] 的长度为 1，数组 [2, 2] 的元素之和等于 4 >= m，所以两者都是好的数组。
 * 将 [2, 2] 切分为 [2] 和 [2]。两个数组的长度都是 1，所以都是好的数组。
 * 示例 2：
 * <p>
 * 输入：nums = [2, 1, 3], m = 5
 * <p>
 * 输出：false
 * <p>
 * 解释：
 * <p>
 * 第一步必须是以下之一：
 * <p>
 * 将 [2, 1, 3] 切分为 [2, 1] 和 [3]。数组 [2, 1] 既不是长度为 1，也没有大于或等于 m 的元素和。
 * 将 [2, 1, 3] 切分为 [2] 和 [1, 3]。数组 [1, 3] 既不是长度为 1，也没有大于或等于 m 的元素和。
 * 因此，由于这两个操作都无效（它们没有将数组分成两个好的数组），因此我们无法将 nums 分成 n 个大小为 1 的数组。
 * <p>
 * 示例 3：
 * <p>
 * 输入：nums = [2, 3, 3, 2, 3], m = 6
 * <p>
 * 输出：true
 * <p>
 * 解释：
 * <p>
 * 将 [2, 3, 3, 2, 3] 切分为 [2] 和 [3, 3, 2, 3]。
 * 将 [3, 3, 2, 3] 切分为 [3, 3, 2] 和 [3]。
 * 将 [3, 3, 2] 切分为 [3, 3] 和 [2]。
 * 将 [3, 3] 切分为 [3] 和 [3]。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= n == nums.length <= 100
 * 1 <= nums[i] <= 100
 * 1 <= m <= 200
 */
public class Code21 {

    public boolean canSplitArray(List<Integer> nums, int m) {
        //特殊
        if (nums.size() <= 2) {
            //是
            return true;
        }
        //循环
        for (int i = 1; i < nums.size(); i++) {
            //如果满足
            if (nums.get(i) + nums.get(i - 1) >= m) {
                //是
                return true;
            }
        }
        //默认不行
        return false;
    }

    public static void main(String[] args) {

    }
}
